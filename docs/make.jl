using Documenter
using Literate
using WannierIO
using Wannier
using WannierPlots

# I put each tutorial inside the corresponding subdir in `tutorials/`,
# and let Literate.jl generates markdown from them.
# Then Documenter.jl processes the markdown and renders HTML.
# In this way, the url of the tutorial pages are `tutorials/<tutorial_name>`
# instead of `../tutorials/<tutorial_name>` which breaks the hyperlink.

# the folder where the Literate.jl tutorial scripts are stored
const TUTORIALS_SRCDIR = joinpath(@__DIR__, "../tutorials")
# the folder where the Documenter.jl md (generated by Literate.jl) are stored
const TUTORIALS_OUTDIR = joinpath(@__DIR__, "src/tutorials")
# the folder for saving HTML plots, also the folder for the final HTML pages
const TUTORIALS_BUILDDIR = joinpath(@__DIR__, "build/tutorials")

# Copied from
# https://github.com/thchr/Brillouin.jl/blob/fad88c5b6965fe4bd59e725ea60655348d36ce0f/docs/make.jl#L4
# ---------------------------------------------------------------------------------------- #
# make PlotlyJS plots showable in ```@example ``` blocks, following the approach suggested
# in https://github.com/fredrikekre/Literate.jl/issues/126
using PlotlyJS
struct HTMLPlot
    p
    h::Int # desired display height in pixels
end
HTMLPlot(p) = HTMLPlot(p, 400)
const ROOT_DIR = TUTORIALS_BUILDDIR
const PLOT_DIR = joinpath(ROOT_DIR, "plots")
function Base.show(io::IO, ::MIME"text/html", p::HTMLPlot)
    mkpath(PLOT_DIR)
    path = joinpath(PLOT_DIR, string(hash(p) % UInt32, ".html"))
    PlotlyJS.savefig(p.p, path; format="html")
    return print(
        io,
        "<object type=\"text/html\" data=\"../$(relpath(path, ROOT_DIR))\" style=\"width:100%;height:$(p.h)px;\"></object>",
    )
end
# ---------------------------------------------------------------------------------------- #

"""
    update_pwd(file, dir)

Change the current directory path in the markdown file, so that the Documenter.makedocs
could execute in the correct folder.
"""
function update_pwd(dir::AbstractString)

    function _update(content)
        content = replace(content, "PWD = \".\"\n" => "PWD = \"$dir\"\n")
        return content
    end

    return _update

    # (tmppath, tmpio) = mktemp()
    # open(file) do io
    #     for line in eachline(io, keep=true) # keep so the new line isn't chomped
    #         if "PWD = \".\"\n" == line
    #             line = "PWD = \"$dir\"\n"
    #         end
    #         write(tmpio, line)
    #     end
    # end
    # close(tmpio)
    # mv(tmppath, file, force=true)
end


for dir in readdir(TUTORIALS_SRCDIR)
    isdir(dir) || continue

    # jl = filter(x -> endswith(x, ".jl"), readdir(joinpath(TUTORIALS_SRCDIR, dir)))
    # I assume the tutorial file is named as `tutorial.jl`
    jl = "tutorial.jl"

    file = joinpath(TUTORIALS_SRCDIR, dir, jl)
    isfile(file) || error("tutorial file not found: $file")

    # I need to change the current directory path in the markdown file,
    # because the Documenter.makedocs expects a common `workdir`.
    # Also rename file to avoid name clash.
    md = "$dir.md"
    Literate.markdown(file, TUTORIALS_OUTDIR; name=md, postprocess=update_pwd(dir))

    # the notebook needs to be executed in the correct path to read `amn` etc. files,
    # however, Literate.jl will execute the notebook in the output dir,
    # so I need to first output in workdir, then move to build dir
    workdir = joinpath(TUTORIALS_SRCDIR, dir)
    ipynb = "$dir.ipynb"  # rename to avoid name clash
    Literate.notebook(file, workdir; name=ipynb)
    mv(joinpath(workdir, ipynb), joinpath(TUTORIALS_OUTDIR, ipynb); force=true)

    # won't execute the generated jl script, only need to rename
    Literate.script(file, TUTORIALS_OUTDIR; name="$dir.jl")
end

makedocs(;
    sitename="Wannier.jl",
    authors="Junfeng Qiao and contributors.",
    modules=[WannierIO, Wannier, WannierPlots],
    # the `example` blocks in the tutorials need correct path to read files
    workdir=TUTORIALS_SRCDIR,
    pages=[
        "Home" => "index.md",
        "Getting Started" => "start.md",
        # The tutorials will be processed by Literate.jl.
        # Here you can specify the name of tutorial page shown in the left sidebar,
        # by changing the key of the dict.
        "Tutorial" => [
            "Foreword" => "tutorials/0-foreword.md",
            "Maximal localization" => "tutorials/1-maxloc.md",
            "Disentanglement" => "tutorials/2-disentangle.md",
            "Band structure" => "tutorials/3-band.md",
            "Real space WF" => "tutorials/4-realspace.md",
            "Parallel transport" => "tutorials/5-parallel_transport.md",
            "Split valence/conduction" => "tutorials/6-split.md",
            "Constrain WF center" => "tutorials/7-constrain_center.md",
            "Fermi surface" => "tutorials/8-fermisurf.md",
        ],
        "Theory" => [
            "Algorithm" => "theory/algorithm.md",
            "Normalization" => "theory/normalization.md",
        ],
        "API" => [
            "WannierIO" => [
                "Home" => "index.md",
                "API" => [
                    "Convention" => "api/convention.md",
                    "Util" => "api/util.md",
                    "Wannier90" => "api/w90.md",
                    "Volumetric data" => "api/volumetric.md",
                    "QE" => "api/qe.md",
                ],
            ],
            "Utility" => "api/util.md",
            "Input/Output" => "api/io.md",
            "B vector" => "api/bvector.md",
            "Model" => "api/model.md",
            "Wannierize" => "api/wannierize.md",
            "Interpolation" => "api/interpolation.md",
            "Real space" => "api/realspace.md",
            "Command line" => "api/cli.md",
            "WannierPlots" => [
                "Home" => "index.md",
                # the tutorials will be processed by Literate
                "Tutorial" => [
                    "Band structure" => "tutorials/1-band.md",
                    "Real space WFs" => "tutorials/2-wf.md",
                    # "Fermi surface" => "tutorials/3-fermisurf.md",
                ],
                "API" => [
                    "Band" => "api/band.md",
                    "Real space" => "api/realspace.md",
                    # "Fermi surface" => "api/fermisurf.md",
                ],
            ]
        ],
    ],
)
